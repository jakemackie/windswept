name: Deploy Bot

on:
  push:
    branches:
      - deployment/production
      - deployment/staging

jobs:
  deploy-staging:
    if: github.ref == 'refs/heads/deployment/staging'
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.STAGING_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: NPM Install
        uses: actions/setup-node@v4
        with: 
          node-version: '22.12.0'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node dependencies
        working-directory: ./
        run: npm install --no-audit
        shell: bash

      # Compile Assets
      - name: Build Typescript
        working-directory: ./
        run: npm run build
        shell: bash

      - name: Create .env file
        run: |
          echo "DISCORD_TOKEN=${{ secrets.STAGING_DISCORD_TOKEN }}" > ./.env

      - name: Rsync project to VPS
        run: |
          rsync -avz \
            -e "ssh -i ~/.ssh/id_rsa" \
            ./ root@${{ secrets.STAGING_SSH_HOST }}:/home/discord-ts-new/

      - name: Restart Ubuntu Service
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.STAGING_SSH_HOST }} "sudo systemctl restart discord-ts-new.service"

  deploy-production:
    if: github.ref == 'refs/heads/deployment/production'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: NPM Install
        uses: actions/setup-node@v4
        with: 
          node-version: '22.12.0'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node dependencies
        working-directory: ./
        run: npm install --no-audit
        shell: bash

      # Compile Assets
      - name: Build Typescript
        working-directory: ./
        run: npm run build
        shell: bash

      - name: Create .env file
        run: |
          echo "DISCORD_TOKEN=${{ secrets.PRODUCTION_DISCORD_TOKEN }}" > ./.env

      - name: Rsync project to VPS
        run: |
          rsync -avz \
            -e "ssh -i ~/.ssh/id_rsa" \
            ./ root@${{ secrets.PRODUCTION_SSH_HOST }}:/home/windswept/

      - name: Restart Ubuntu Service
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.PRODUCTION_SSH_HOST }} "sudo systemctl restart windswept.service"
